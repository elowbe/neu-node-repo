{"nodes": [
    {
        "attributes": [
            {
                "connected": {
                    "label": "",
                    "nodeID": 0
                },
                "label": "enabled",
                "ioState": "input",
                "type": "java.lang.Boolean",
                "required": true
            },
            {
                "label": "enabled_",
                "ioState": "output",
                "type": "java.lang.Boolean",
                "required": true
            },
            {
                "connected": {
                    "label": "",
                    "nodeID": 0
                },
                "label": "sync",
                "ioState": "input",
                "type": "java.lang.Object",
                "required": false
            },
            {
                "label": "_sync",
                "ioState": "output",
                "type": "java.lang.Object",
                "required": false
            },
            {
                "label": "error",
                "ioState": "output",
                "type": "java.lang.Object",
                "required": false
            },
            {
                "connected": {
                    "label": "",
                    "nodeID": 0
                },
                "label": "camera",
                "ioState": "input",
                "type": "com.jinteractive.main.Camera",
                "required": false
            },
            {
                "connected": {
                    "label": "",
                    "nodeID": 0
                },
                "label": "font",
                "ioState": "input",
                "type": "java.awt.Font",
                "required": false
            },
            {
                "connected": {
                    "label": "",
                    "nodeID": 0
                },
                "label": "parent",
                "ioState": "input",
                "type": "com.jinteractive.gui.Display",
                "required": false
            },
            {
                "label": "parent_",
                "ioState": "output",
                "type": "com.jinteractive.gui.Display",
                "required": false
            },
            {
                "label": "ui",
                "ioState": "output",
                "type": "com.jinteractive.gui.Display",
                "required": false
            },
            {
                "connected": {
                    "label": "",
                    "nodeID": 0
                },
                "label": "min-height",
                "ioState": "input",
                "type": "java.lang.Number",
                "required": true
            },
            {
                "connected": {
                    "label": "",
                    "nodeID": 0
                },
                "label": "max-height",
                "ioState": "input",
                "type": "java.lang.Number",
                "required": true
            },
            {
                "connected": {
                    "label": "",
                    "nodeID": 0
                },
                "label": "min-width",
                "ioState": "input",
                "type": "java.lang.Number",
                "required": true
            },
            {
                "connected": {
                    "label": "",
                    "nodeID": 0
                },
                "label": "max-width",
                "ioState": "input",
                "type": "java.lang.Number",
                "required": true
            },
            {
                "connected": {
                    "label": "",
                    "nodeID": 0
                },
                "label": "title",
                "ioState": "input",
                "type": "java.lang.String",
                "required": true
            },
            {
                "connected": {
                    "label": "",
                    "nodeID": 0
                },
                "label": "x",
                "ioState": "input",
                "type": "java.lang.Number",
                "required": true
            },
            {
                "connected": {
                    "label": "",
                    "nodeID": 0
                },
                "label": "y",
                "ioState": "input",
                "type": "java.lang.Number",
                "required": true
            }
        ],
        "id": -1550476948,
        "class": "com.loom.graph.nodes.UiWindowNode",
        "properties": {
            "quick_min-height": -1,
            "quick_title": "1980s Synthesizer",
            "quick_max-width": -1,
            "x": -649,
            "y": 156.2917,
            "quick_min-width": -1,
            "quick_y": 0,
            "quick_enabled": true,
            "quick_x": 0,
            "quick_max-height": -1
        }
    },
    {
        "attributes": [
            {
                "connected": {
                    "label": "",
                    "nodeID": 0
                },
                "label": "enabled",
                "ioState": "input",
                "type": "java.lang.Boolean",
                "required": true
            },
            {
                "label": "enabled_",
                "ioState": "output",
                "type": "java.lang.Boolean",
                "required": true
            },
            {
                "connected": {
                    "label": "",
                    "nodeID": 0
                },
                "label": "sync",
                "ioState": "input",
                "type": "java.lang.Object",
                "required": false
            },
            {
                "label": "_sync",
                "ioState": "output",
                "type": "java.lang.Object",
                "required": false
            },
            {
                "label": "error",
                "ioState": "output",
                "type": "java.lang.Object",
                "required": false
            },
            {
                "connected": {
                    "label": "",
                    "nodeID": 0
                },
                "label": "camera",
                "ioState": "input",
                "type": "com.jinteractive.main.Camera",
                "required": false
            },
            {
                "connected": {
                    "label": "",
                    "nodeID": 0
                },
                "label": "font",
                "ioState": "input",
                "type": "java.awt.Font",
                "required": false
            },
            {
                "connected": {
                    "label": "ui",
                    "nodeID": -1550476948
                },
                "label": "parent",
                "ioState": "input",
                "type": "com.jinteractive.gui.Display",
                "required": false
            },
            {
                "label": "parent_",
                "ioState": "output",
                "type": "com.jinteractive.gui.Display",
                "required": false
            },
            {
                "label": "ui",
                "ioState": "output",
                "type": "com.jinteractive.gui.Display",
                "required": false
            },
            {
                "connected": {
                    "label": "",
                    "nodeID": 0
                },
                "label": "width",
                "ioState": "input",
                "type": "java.lang.Number",
                "required": true
            },
            {
                "connected": {
                    "label": "",
                    "nodeID": 0
                },
                "label": "height",
                "ioState": "input",
                "type": "java.lang.Number",
                "required": true
            },
            {
                "connected": {
                    "label": "output",
                    "nodeID": -1550345874
                },
                "label": "script",
                "ioState": "input",
                "type": "java.lang.String",
                "required": true
            },
            {
                "label": "exception_log",
                "ioState": "output",
                "type": "java.lang.String",
                "required": false
            }
        ],
        "id": -1550345875,
        "class": "com.loom.graph.nodes.UiCanvasNode",
        "properties": {
            "quick_script": "// UiCanvas script skeleton (Java-formatted Groovy)\n// You can implement any of the Canvas callbacks below.\n// Available context properties:\n//   - uiWidth  (int): current canvas width\n//   - uiHeight (int): current canvas height\n//   - uiDisplay: the CanvasDisplay instance (optional)\n//   - globals : Map<String,Object> shared across the graph (GlobalNode-compatible)\n// Common imports are available: java.awt.*, java.awt.event.*,\n// com.jinteractive.gui.*, com.jinteractive.main.*, com.loom.graph.*\n// Exceptions are logged to the 'exception_log' output (unique errors only)\n\nvoid tick(Float delta){\n    // Called every frame with delta time in seconds (approx).\n}\n\nvoid draw(Graphics2D g2d){\n    // Example: clear background (uncomment to use)\n    // g2d.setColor(java.awt.Color.BLACK);\n    // g2d.fillRect(0, 0, (uiWidth as int), (uiHeight as int));\n}\n\nvoid destroy(){\n    // Called when the canvas is destroyed.\n}\n\nvoid mouseDown(ButtonType button){\n    // Mouse button pressed.\n}\n\nvoid mouseUp(ButtonType button){\n    // Mouse button released.\n}\n\nvoid scroll(int amount){\n    // Mouse wheel scrolled; positive is scroll up in most cases.\n}\n\nvoid keyDown(KeyEvent e){\n    // Key pressed; check e.getKeyCode().\n}\n\nvoid keyUp(KeyEvent e){\n    // Key released.\n}",
            "quick_height": 420,
            "x": 151,
            "y": -447.0833,
            "quick_width": 742,
            "quick_enabled": true
        }
    },
    {
        "attributes": [
            {
                "connected": {
                    "label": "",
                    "nodeID": 0
                },
                "label": "enabled",
                "ioState": "input",
                "type": "java.lang.Boolean",
                "required": true
            },
            {
                "label": "enabled_",
                "ioState": "output",
                "type": "java.lang.Boolean",
                "required": true
            },
            {
                "connected": {
                    "label": "",
                    "nodeID": 0
                },
                "label": "sync",
                "ioState": "input",
                "type": "java.lang.Object",
                "required": false
            },
            {
                "label": "_sync",
                "ioState": "output",
                "type": "java.lang.Object",
                "required": false
            },
            {
                "label": "error",
                "ioState": "output",
                "type": "java.lang.Object",
                "required": false
            },
            {
                "label": "output",
                "ioState": "output",
                "type": "java.lang.String",
                "required": false
            },
            {
                "label": "processed-output",
                "ioState": "output",
                "type": "java.lang.String",
                "required": false
            },
            {
                "connected": {
                    "label": "",
                    "nodeID": 0
                },
                "label": "input",
                "ioState": "input",
                "type": "java.lang.String",
                "required": false
            }
        ],
        "id": -1550345874,
        "class": "com.loom.graph.nodes.TextNode",
        "properties": {
            "quick_input": "import groovy.transform.Field\nimport javax.sound.midi.*\nimport java.awt.*\nimport java.awt.event.*\n\n@Field boolean initialized=false\n@Field Synthesizer synth\n@Field MidiChannel chan\n\n@Field int PROG_SQUARE=80\n@Field int PROG_SAW=81\n@Field int PROG_BRASS=61\n@Field int PROG_PAD=88\n@Field int currentProg=80\n\n@Field int baseMidi=60\n@Field java.util.Set<Integer> heldKeys=new java.util.HashSet<>()\n@Field Integer mouseNote=null\n\n@Field float cutoff=0.8f\n@Field float reso=0.3f\n@Field float modAmt=0.2f\n@Field float reverb=0.25f\n@Field float chorus=0.15f\n\n@Field float mx=0f,my=0f\n@Field boolean isMouseDown=false\n@Field String dragTarget=null\n@Field float dragStartY=0f\n@Field float dragStartVal=0f\n\n@Field int margin=14\n@Field int rackH=180\n@Field int keysY=210\n@Field int keyWhiteW=34\n@Field int keyWhiteH=180\n@Field int keyBlackW=18\n@Field int keyBlackH=110\n@Field int nWhite=21\n@Field int[] WHITE_OFF = [0,2,4,5,7,9,11] as int[]\n@Field int[] BLACK_DX = [1,2,4,5,6] as int[]\n@Field int[] SEMIS_BLACK = [1,3,6,8,10] as int[]\n\n@Field Font btnBase=new Font(\"SansSerif\", Font.BOLD, 14)\n@Field Font knobLabelBase=new Font(\"SansSerif\", Font.PLAIN, 12)\n@Field Font headerBase=new Font(\"SansSerif\", Font.PLAIN, 14)\n\nvoid midiSend(){\n  if(chan==null) return;\n  chan.controlChange(74,(int)(cutoff*127));\n  chan.controlChange(71,(int)(reso*127));\n  chan.controlChange(1,(int)(modAmt*127));\n  chan.controlChange(91,(int)(reverb*127));\n  chan.controlChange(93,(int)(chorus*127));\n}\n\nvoid setProgram(int p){\n  if(chan!=null){ currentProg=p; chan.programChange(p); midiSend(); }\n}\n\nvoid init(){\n  try{\n    synth=MidiSystem.getSynthesizer();\n    synth.open();\n    chan=synth.getChannels()[0];\n    setProgram(currentProg);\n  }catch(Throwable t){}\n  initialized=true;\n}\n\nint whiteNoteAt(int wi){\n  int oct=wi/7; int idx=wi%7; return baseMidi + oct*12 + WHITE_OFF[idx];\n}\n\nint blackNoteAt(int oct,int k){\n  return baseMidi + oct*12 + SEMIS_BLACK[k];\n}\n\nint hitBlack(float x,float y){\n  if(y<keysY||y>keysY+keyBlackH) return -1;\n  int octs=(int)Math.ceil(nWhite/7.0);\n  for(int o=0;o<octs;o++){\n    int whitesBefore=o*7; int wx0=margin + whitesBefore*keyWhiteW;\n    for(int k=0;k<BLACK_DX.length;k++){\n      int dx=BLACK_DX[k]; if(whitesBefore+dx>nWhite-1) continue;\n      int bx=wx0 + dx*keyWhiteW - keyBlackW/2;\n      if(x>=bx&&x<=bx+keyBlackW) return blackNoteAt(o,k);\n    }\n  }\n  return -1;\n}\n\nint hitWhite(float x,float y){\n  if(y<keysY||y>keysY+keyWhiteH) return -1;\n  int i=(int)((x-margin)/keyWhiteW);\n  if(i<0||i>=nWhite) return -1;\n  return whiteNoteAt(i);\n}\n\nint mouseToNote(float x,float y){\n  int n=hitBlack(x,y); return (n!=-1)?n:hitWhite(x,y);\n}\n\nvoid noteOn(int n){\n  if(chan==null) return; if(!heldKeys.contains(n)){ chan.noteOn(n,100); heldKeys.add(n); }\n}\n\nvoid noteOff(int n){\n  if(chan==null) return; if(heldKeys.contains(n)){ chan.noteOff(n); heldKeys.remove(n); }\n}\n\nvoid allOff(){\n  if(chan==null) return; for(Integer n: new java.util.HashSet<>(heldKeys)) chan.noteOff(n); heldKeys.clear(); mouseNote=null;\n}\n\nvoid tick(Float delta){\n  if(!initialized) init();\n  try{\n    def cam=uiDisplay?.getCamera(); def m=cam?.getWorldMouse();\n    if(m!=null){ def p=uiDisplay?.bounds?.position; mx=(float)(m.x - (p!=null?p.x:0)); my=(float)(m.y - (p!=null?p.y:0)); }\n  }catch(Throwable ign){}\n  if(isMouseDown && dragTarget!=null){\n    float dy=(dragStartY - my); float k=0.005f; float v=dragStartVal + dy*k; v=Math.max(0f,Math.min(1f,v));\n    if(dragTarget==\"cutoff\") cutoff=v; else if(dragTarget==\"reso\") reso=v; else if(dragTarget==\"mod\") modAmt=v; else if(dragTarget==\"reverb\") reverb=v; else if(dragTarget==\"chorus\") chorus=v;\n    midiSend();\n  }\n}\n\nvoid drawNeonPanel(Graphics2D g,int x,int y,int w,int h){\n  g.setColor(new Color(10,14,28)); g.fillRoundRect(x,y,w,h,10,10);\n  g.setColor(new Color(80,180,255,180)); g.setStroke(new BasicStroke(2f)); g.drawRoundRect(x+1,y+1,w-2,h-2,10,10);\n}\n\nboolean hitRect(int x,int y,int w,int h,float px,float py){\n  return (px>=x&&px<=x+w&&py>=y&&py<=y+h);\n}\n\nfloat dist(float x1,float y1,float x2,float y2){\n  float dx=x2-x1, dy=y2-y1; return (float)Math.sqrt(dx*dx+dy*dy);\n}\n\nFont fitFont(Graphics2D g, String s, int maxWidth, Font base, int minSize){\n  int sz=base.getSize();\n  Font f=base.deriveFont((float)sz);\n  FontMetrics fm=g.getFontMetrics(f);\n  while(fm.stringWidth(s)>maxWidth && sz>minSize){ sz--; f=base.deriveFont((float)sz); fm=g.getFontMetrics(f); }\n  return f;\n}\n\nvoid drawFittedString(Graphics2D g, String s, int x, int y, int maxWidth, Font base, Color color){\n  Font f=fitFont(g,s,maxWidth,base,9);\n  g.setFont(f);\n  g.setColor(color);\n  g.drawString(s,x,y);\n}\n\nfloat drawKnob(Graphics2D g,int cx,int cy,float val,String label){\n  int r=20;\n  g.setColor(new Color(25,30,50)); g.fillOval(cx-r-8, cy-r-8, (r+8)*2, (r+8)*2);\n  g.setColor(new Color(120,160,255,120)); g.setStroke(new BasicStroke(2f)); g.drawOval(cx-r-8, cy-r-8, (r+8)*2, (r+8)*2);\n  g.setColor(new Color(40,45,70)); g.fillOval(cx-r, cy-r, r*2, r*2);\n  g.setColor(new Color(220,235,255)); g.drawOval(cx-r, cy-r, r*2, r*2);\n  double ang=Math.toRadians(45 + val*270);\n  int ix=(int)(cx + Math.cos(ang)*(r-6)); int iy=(int)(cy + Math.sin(ang)*(r-6));\n  g.setColor(new Color(255,140,120)); g.setStroke(new BasicStroke(3f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND)); g.drawLine(cx,cy,ix,iy);\n  Font lf=fitFont(g,label, 60, knobLabelBase, 9);\n  g.setFont(lf);\n  FontMetrics lfm=g.getFontMetrics();\n  int tw=lfm.stringWidth(label);\n  int ty=cy + r + 16;\n  g.setColor(new Color(200,220,255)); g.drawString(label, cx - tw/2, ty);\n  return val;\n}\n\nint drawButton(Graphics2D g,int x,int y,String label, boolean hot){\n  int w=100,h=28; drawNeonPanel(g,x,y,w,h);\n  int pad=10;\n  int maxW = w - pad*2;\n  int maxH = h - 10; // vertical padding to avoid clipping\n  // Pick a font size that fits both width and height\n  int sz = btnBase.getSize();\n  Font f = btnBase.deriveFont((float)sz);\n  FontMetrics fm = g.getFontMetrics(f);\n  while ((fm.stringWidth(label) > maxW || fm.getAscent() > maxH) && sz > 9){\n    sz--; f = btnBase.deriveFont((float)sz); fm = g.getFontMetrics(f);\n  }\n  // Ellipsize if still too wide at minimum size\n  String text = label;\n  if (fm.stringWidth(text) > maxW){\n    String ell = \"\u2026\";\n    int len = text.length();\n    while (len > 0 && fm.stringWidth(text.substring(0,len) + ell) > maxW) len--;\n    text = (len <= 0 ? ell : text.substring(0,len) + ell);\n  }\n  g.setFont(f);\n  fm = g.getFontMetrics();\n  int tw = fm.stringWidth(text);\n  int tx = x + (w - tw)/2; // center horizontally\n  int ty = y + (h + fm.getAscent() - fm.getDescent())/2 - 1; // center vertically\n  g.setColor(hot?new Color(255,120,120):new Color(160,200,255));\n  g.drawString(text, tx, ty);\n  return w;\n}\n\nvoid drawKeys(Graphics2D g){\n  for(int i=0;i<nWhite;i++){\n    int x=margin + i*keyWhiteW;\n    g.setColor(heldKeys.contains(whiteNoteAt(i))?new Color(255,240,210):Color.WHITE);\n    g.fillRect(x,keysY,keyWhiteW,keyWhiteH);\n    g.setColor(new Color(40,40,40)); g.drawRect(x,keysY,keyWhiteW,keyWhiteH);\n  }\n  int octs=(int)Math.ceil(nWhite/7.0);\n  for(int o=0;o<octs;o++){\n    int whitesBefore=o*7; int wx0=margin + whitesBefore*keyWhiteW;\n    for(int k=0;k<BLACK_DX.length;k++){\n      int dx=BLACK_DX[k]; if(whitesBefore+dx>nWhite-1) continue;\n      int bx=wx0 + dx*keyWhiteW - keyBlackW/2; int n=blackNoteAt(o,k);\n      g.setColor(heldKeys.contains(n)?new Color(70,70,70):new Color(20,20,20));\n      g.fillRoundRect(bx,keysY,keyBlackW,keyBlackH,6,6);\n      g.setColor(new Color(5,5,5)); g.drawRoundRect(bx,keysY,keyBlackW,keyBlackH,6,6);\n    }\n  }\n}\n\nvoid draw(Graphics2D g){\n  if(!initialized) init();\n  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n  g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\n  g.setColor(new Color(8,10,18)); g.fillRect(0,0,uiWidth,uiHeight);\n  g.setColor(new Color(0,200,255,40)); g.fillRoundRect(10,8, uiWidth-20, 36, 10,10);\n  String header=\"NeonSynth '80s \u2014 Click keys or use Z X C V B N M , . / (S D G H J for sharps)\";\n  int hdrMax=uiWidth-36;\n  Font hf=fitFont(g, header, hdrMax, headerBase, 10);\n  g.setFont(hf);\n  FontMetrics hfm=g.getFontMetrics();\n  int hx=18; int hy=30; g.setColor(new Color(220,240,255));\n  g.drawString(header, hx, hy);\n\n  drawNeonPanel(g, 10, 44, uiWidth-20, rackH);\n  int bx=26, by=64;\n  int w1=drawButton(g,bx,by, \"Square Lead\", currentProg==PROG_SQUARE); bx+=w1+10;\n  int w2=drawButton(g,bx,by,\"Saw Lead\", currentProg==PROG_SAW); bx+=w2+10;\n  int w3=drawButton(g,bx,by,\"Synth Brass\", currentProg==PROG_BRASS); bx+=w3+10;\n  drawButton(g,bx,by,\"Pad\", currentProg==PROG_PAD);\n\n  int kx=60; int ky=140;\n  cutoff=drawKnob(g,kx,ky,cutoff,\"Cutoff\"); kx+=90;\n  reso=drawKnob(g,kx,ky,reso,\"Reso\"); kx+=90;\n  modAmt=drawKnob(g,kx,ky,modAmt,\"Vibrato\"); kx+=90;\n  reverb=drawKnob(g,kx,ky,reverb,\"Reverb\"); kx+=90;\n  chorus=drawKnob(g,kx,ky,chorus,\"Chorus\");\n\n  int rx=820, ry=64; drawButton(g,rx,ry,\"Randomize\",false); drawButton(g,rx,ry+40,\"Panic\",false);\n  drawKeys(g);\n}\n\nvoid mouseDown(ButtonType b){\n  isMouseDown=true;\n  try{\n    def m=uiDisplay?.getCamera()?.getWorldMouse(); if(m==null) return;\n    def p=uiDisplay?.bounds?.position;\n    float x=(float)(m.x - (p!=null?p.x:0)); float y=(float)(m.y - (p!=null?p.y:0));\n\n    if(hitRect(26,64,100,28,x,y)){ setProgram(PROG_SQUARE); return; }\n    if(hitRect(26+110,64,100,28,x,y)){ setProgram(PROG_SAW); return; }\n    if(hitRect(26+220,64,100,28,x,y)){ setProgram(PROG_BRASS); return; }\n    if(hitRect(26+330,64,100,28,x,y)){ setProgram(PROG_PAD); return; }\n\n    if(hitRect(820,64,100,28,x,y)){\n      cutoff=(float)Math.random(); reso=(float)Math.random(); modAmt=(float)Math.random(); reverb=(float)Math.random(); chorus=(float)Math.random(); midiSend(); return;\n    }\n    if(hitRect(820,104,100,28,x,y)){ allOff(); return; }\n\n    if(dist(x, y, 60, 140)<=28){ dragTarget=\"cutoff\"; dragStartY=y; dragStartVal=cutoff; return; }\n    if(dist(x, y, 150, 140)<=28){ dragTarget=\"reso\"; dragStartY=y; dragStartVal=reso; return; }\n    if(dist(x, y, 240, 140)<=28){ dragTarget=\"mod\"; dragStartY=y; dragStartVal=modAmt; return; }\n    if(dist(x, y, 330, 140)<=28){ dragTarget=\"reverb\"; dragStartY=y; dragStartVal=reverb; return; }\n    if(dist(x, y, 420, 140)<=28){ dragTarget=\"chorus\"; dragStartY=y; dragStartVal=chorus; return; }\n\n    int n=mouseToNote(x,y); if(n!=-1){ noteOn(n); mouseNote=n; }\n  }catch(Throwable t){}\n}\n\nvoid mouseUp(ButtonType b){\n  isMouseDown=false; dragTarget=null; if(mouseNote!=null){ noteOff(mouseNote); mouseNote=null; }\n}\n\nvoid scroll(int amt){}\n\nvoid keyDown(KeyEvent e){\n  char c=Character.toLowerCase(e.getKeyChar()); int n=-1;\n  switch(c){ case 'z': n=60; break; case 's': n=61; break; case 'x': n=62; break; case 'd': n=63; break; case 'c': n=64; break; case 'v': n=65; break; case 'g': n=66; break; case 'b': n=67; break; case 'h': n=68; break; case 'n': n=69; break; case 'j': n=70; break; case 'm': n=71; break; case ',': n=72; break; case 'l': n=73; break; case '.': n=74; break; case ';': n=75; break; case '/': n=76; break; }\n  if(n!=-1) noteOn(n);\n}\n\nvoid keyUp(KeyEvent e){\n  char c=Character.toLowerCase(e.getKeyChar()); int n=-1;\n  switch(c){ case 'z': n=60; break; case 's': n=61; break; case 'x': n=62; break; case 'd': n=63; break; case 'c': n=64; break; case 'v': n=65; break; case 'g': n=66; break; case 'b': n=67; break; case 'h': n=68; break; case 'n': n=69; break; case 'j': n=70; break; case 'm': n=71; break; case ',': n=72; break; case 'l': n=73; break; case '.': n=74; break; case ';': n=75; break; case '/': n=76; break; }\n  if(n!=-1) noteOff(n);\n}\n\nvoid destroy(){\n  try{ allOff(); if(synth!=null) synth.close(); }catch(Throwable t){}\n}",
            "x": -649,
            "y": -1050.4584,
            "text": "",
            "quick_enabled": true
        }
    }
]}